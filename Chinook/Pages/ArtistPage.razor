@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using Chinook.Services.Interfaces;

@inject IArtistPageService _artistPageService;
@inject IPlaylistPageService _playlistService;
@inject IUserService _userService;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist? Artist;
    private List<PlaylistTrack> Tracks;
    private List<Models.Playlist> Playlists;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private int SelctValue = 0;
    private string NewPlaylist;
    private string ArtistName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentUserId = await _userService.GetUserId();

            Artist = await _artistPageService.GetArtistByIdAsync(ArtistId);
            Tracks = await _artistPageService.GetTracksByArtistId(ArtistId, CurrentUserId);
            Playlists = await _playlistService.GetPlaylists();
        }
        catch (Exception ex)
        {
            // Handle the exception, log it, or display an error message to the user.
            InfoMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void FavoriteTrack(long trackId)
    {
        try
        {
            var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
            if (track != null)
            {
                _playlistService.AddTracksToPlaylist(track, isFavorite: true);
                track.IsFavorite = true;
            }
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";

        }
        catch (Exception ex)
        {
            InfoMessage = $"An error occurred: {ex.Message}";
            throw;
        }
    }

    private void UnfavoriteTrack(long trackId)
    {
        try
        {
            var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
            if (track != null)
            {
                _playlistService.RemoveTracksFromPlaylist(track);
                track.IsFavorite = false;
            }
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
        }
        catch (Exception ex)
        {
            InfoMessage = $"An error occurred: {ex.Message}";
            throw;
        }
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {
        if (string.IsNullOrEmpty(NewPlaylist))
        {
            _playlistService.AddTracksToPlaylist(SelectedTrack, SelctValue);
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {Playlists.Find(p => p.PlaylistId == SelctValue).Name}.";
        }
        else
        {
            Random random = new Random();
            var track = await _playlistService.GetTrackByTrackId(SelectedTrack.TrackId);

            _playlistService.SavePlaylist(new Models.Playlist()
            {
                //Need to change this to auto increment 
                PlaylistId = (long)random.Next(),
                Name = NewPlaylist,
            }, track);
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {NewPlaylist}.";

        }
        //CloseInfoMessage();
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="SelctValue">
                <option value="0">Select</option>
                @foreach (var playlist in Playlists)
                {
                    <option value="@(playlist.PlaylistId)">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="NewPlaylist" />
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
